// import { useState, useEffect } from 'react';
// import './UserBookingevent.css';
// import NavbarUser from '../Components/NavbarUser';
// // import { useNavigate } from 'react-router-dom';
// import axios from 'axios';

// const UserBookingevent = () => {
//     const [name, setName] = useState("");
//     const [submissiondate, setSubmissionDate] = useState("");
//     const [description, setDescription] = useState("");
//     const [eventtype, setEventType] = useState("");
//     const [eventdate, setEventDate] = useState("");
//     const [headcount, setHeadCount] = useState("");
//     // const [bookingstatus, setbookingstatus] = useState("");
//     // const navigate = useNavigate();

//     useEffect(() => {
//         const bodyStyle = document.body.style;
//         bodyStyle.backgroundImage = "url('https://as1.ftcdn.net/v2/jpg/01/03/21/62/1000_F_103216204_vK4a4jFoOli4BjZMuovGGwkTM1NFnGnZ.jpg')"; 
//         bodyStyle.backgroundSize = 'cover';
//         bodyStyle.backgroundRepeat = 'no-repeat';
//         bodyStyle.backgroundAttachment = 'fixed';
//         bodyStyle.backgroundPosition = 'center center';
//         return () => {
//             document.body.style.backgroundImage = ""; 
//         };
//     }, []);

//     const handleSubmit = async (event) => {
//         event.preventDefault();
        
//         let id=localStorage.getItem('user')
//         console.log(id);
//         try {
//             await axios.post('http://localhost:8080/bookevent/book', {
//                 name,
//                 description,
//                 eventtype,
//                 headcount,
//                 eventdate,
//                 submissiondate,
//                 userid:id,
//                 bookingstatus:"pending"
//             });
        
            
//         } catch (error) {
//             console.error("Error during event booking submission:", error);
//             alert("Failed to book event. Please check your inputs and try again.");
//         }
        
//     };

//     return (
//         <div className='UserBookingeventBody'>
//             <NavbarUser />
//             <form id="bookingForm" className='Bookevent' onSubmit={handleSubmit}>
//                 <h1 className='BookeventTitle'>Book Your Event</h1>
//                 <input type="text" value={name} onChange={(e) => setName(e.target.value)} placeholder="Name" />
//                 <input type="date" value={submissiondate} onChange={(e) => setSubmissionDate(e.target.value)} placeholder="Submission Date" />
//                 <input type="text" value={description} onChange={(e) => setDescription(e.target.value)} placeholder="Description" />
//                 <input type="text" value={eventtype} onChange={(e) => setEventType(e.target.value)} placeholder="Event Type" />
//                 <input type="date" value={eventdate} onChange={(e) => setEventDate(e.target.value)} placeholder="Event Date" />
//                 <input type="number" value={headcount} onChange={(e) => setHeadCount(e.target.value)} placeholder="Head Count" />
//                 {/* <input type="text" value={bookingstatus} onChange={(e) => setbookingstatus(e.target.value)} placeholder="Booking Status" /> */}
//                 <button className='Bookeventbutton'>Book Event</button>
//             </form>
//         </div>
//     );
// };

// export default UserBookingevent;



import { useState, useEffect } from 'react';
import './UserBookingevent.css';
import NavbarUser from '../Components/NavbarUser';
// import { useNavigate } from 'react-router-dom';
import axios from 'axios';

const UserBookingevent = () => {
    const [name, setName] = useState("");
    const [description, setDescription] = useState("");
    const [eventtype, setEventType] = useState("");
    const [submissiondate, setSubmissionDate] = useState("");
    const [headcount, setHeadCount] = useState("");
    const [eventdate, setEventDate] = useState("");
    // const [bookingstatus, setBookingStatus] = useState("pending"); // No need for state if it's always "pending"
    // const navigate = useNavigate();

    useEffect(() => {
        
        document.body.classList.add('userBookingEventBackground');
        return () => {
            document.body.classList.remove('userBookingEventBackground');
        };
    }, []);

    const handleSubmit = async (event) => {
        event.preventDefault();
        
        const userId = localStorage.getItem('user'); // Use more descriptive variable names
        console.log(userId);
        
        const bookingData = {
            bookId: 0, // Assuming this is auto-generated by the backend or not needed in the request
            name,
            description,
            submissiondate,
            userid: userId,
            eventtype,
            eventdate,
            bookingstatus: "pending", 
            headcount,
        };
        
        try {
            await axios.post('http://localhost:8080/bookevent/book', bookingData);
            // If successful, you could navigate to another page or show success message
            // navigate('/success'); // Uncomment and use if navigation is desired after successful booking
            alert("Event booked successfully!");
        } catch (error) {
            console.error("Error during event booking submission:", error);
            alert("Failed to book event. Please check your inputs and try again.");
        }
    };

    return (
        <div className='UserBookingeventBody'>
            <NavbarUser />
            <form id="bookingForm" className='Bookevent' onSubmit={handleSubmit}>
                <h1 className='BookeventTitle'>Book Your Event</h1>
                <input type="text" value={name} onChange={(e) => setName(e.target.value)} placeholder="Name" />
                <input type="text" value={description} onChange={(e) => setDescription(e.target.value)} placeholder="Description" />
                <input type="text" value={eventtype} onChange={(e) => setEventType(e.target.value)} placeholder="Event Type" />
                
                <input type="date" value={submissiondate} onChange={(e) => setSubmissionDate(e.target.value)} placeholder="Submission Date" />
                <label>
                    
                <input type="number" value={headcount} onChange={(e) => setHeadCount(e.target.value)} placeholder="Head Count" />
                </label>
                <label>
                    Event Date:
                <input type="date" value={eventdate} onChange={(e) => setEventDate(e.target.value)} placeholder="Event Date" />
                </label>
                <button className='Bookeventbutton'>Book Event</button>
            </form>
        </div>
    );
};

export default UserBookingevent;
